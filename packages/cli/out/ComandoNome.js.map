{"version":3,"sources":["../src/ComandoNome.ts"],"sourcesContent":["import { falseador } from '@falseador/lib';\nimport { gênero, validaNúmeroInteiroPositivo } from './Utilitários';\nimport { Comando } from './Comando';\n\nexport class ComandoNome extends Comando {\n  public constructor() {\n    super('nome');\n\n    super\n      .description('Gera/transforma nomes.')\n      .alias('n')\n      .addCommand(this.subcomandoCompleto(), { isDefault: true })\n      .addCommand(this.subcomandoSobrenomes())\n      .addCommand(this.subcomandoComposto())\n      .addCommand(this.subcomandoAbreviado())\n      .addCommand(this.subcomandoPrimeiro());\n  }\n\n  private subcomandoCompleto() {\n    return new Comando('completo')\n      .description('Nome completo.')\n      .addArgument(gênero)\n      .allowExcessArguments(false)\n      .action((gênero) => {\n        process.stdout.write(falseador.nome.completo(gênero));\n      });\n  }\n\n  private subcomandoPrimeiro() {\n    return new Comando('primeiro')\n      .description('Primeiro nome.')\n      .addArgument(gênero)\n      .allowExcessArguments(false)\n      .action((gênero) => {\n        process.stdout.write(falseador.nome.primeiro(gênero));\n      });\n  }\n\n  private subcomandoComposto() {\n    return new Comando('composto')\n      .description('Nome composto.')\n      .addArgument(gênero)\n      .allowExcessArguments(false)\n      .action((gênero) => {\n        process.stdout.write(falseador.nome.composto(gênero));\n      });\n  }\n\n  private subcomandoSobrenomes() {\n    return new Comando('sobrenomes')\n      .description('Conjunto de sobrenomes.')\n      .argument(\n        '[num]',\n        'Número de sobrenomes, entre 1 e 3 caso indefinido.',\n        validaNúmeroInteiroPositivo,\n      )\n      .allowExcessArguments(false)\n      .action((num) => {\n        process.stdout.write(falseador.nome.sobrenomes(num));\n      });\n  }\n\n  private subcomandoAbreviado() {\n    return new Comando('abreviado')\n      .description('Abrevia nomes.')\n      .argument('nome', 'Nome a ser abreviado entre aspas.')\n      .action((nome) => {\n        process.stdout.write(falseador.nome.abreviado(nome));\n      });\n  }\n}\n"],"names":["falseador","gênero","validaNúmeroInteiroPositivo","Comando","ComandoNome","description","alias","addCommand","subcomandoCompleto","isDefault","subcomandoSobrenomes","subcomandoComposto","subcomandoAbreviado","subcomandoPrimeiro","addArgument","allowExcessArguments","action","process","stdout","write","nome","completo","primeiro","composto","argument","num","sobrenomes","abreviado"],"mappings":"AAAA,OAASA,SAAS,KAAQ,gBAAiB,AAC3C,QAASC,MAAM,CAAEC,2BAA2B,KAAQ,kBAAgB,AACpE,QAASC,OAAO,KAAQ,cAAY,AAEpC,QAAO,MAAMC,oBAAoBD,QAC/B,aAAqB,CACnB,KAAK,CAAC,QAEN,KAAK,CACFE,YAAY,0BACZC,KAAK,CAAC,KACNC,UAAU,CAAC,IAAI,CAACC,kBAAkB,GAAI,CAAEC,UAAW,IAAK,GACxDF,UAAU,CAAC,IAAI,CAACG,oBAAoB,IACpCH,UAAU,CAAC,IAAI,CAACI,kBAAkB,IAClCJ,UAAU,CAAC,IAAI,CAACK,mBAAmB,IACnCL,UAAU,CAAC,IAAI,CAACM,kBAAkB,GACvC,CAEA,AAAQL,oBAAqB,CAC3B,OAAO,IAAIL,QAAQ,YAChBE,WAAW,CAAC,kBACZS,WAAW,CAACb,QACZc,oBAAoB,CAAC,OACrBC,MAAM,CAAC,AAACf,SACPgB,QAAQC,MAAM,CAACC,KAAK,CAACnB,UAAUoB,IAAI,CAACC,QAAQ,CAACpB,QAC/C,EACJ,CAEA,AAAQY,oBAAqB,CAC3B,OAAO,IAAIV,QAAQ,YAChBE,WAAW,CAAC,kBACZS,WAAW,CAACb,QACZc,oBAAoB,CAAC,OACrBC,MAAM,CAAC,AAACf,SACPgB,QAAQC,MAAM,CAACC,KAAK,CAACnB,UAAUoB,IAAI,CAACE,QAAQ,CAACrB,QAC/C,EACJ,CAEA,AAAQU,oBAAqB,CAC3B,OAAO,IAAIR,QAAQ,YAChBE,WAAW,CAAC,kBACZS,WAAW,CAACb,QACZc,oBAAoB,CAAC,OACrBC,MAAM,CAAC,AAACf,SACPgB,QAAQC,MAAM,CAACC,KAAK,CAACnB,UAAUoB,IAAI,CAACG,QAAQ,CAACtB,QAC/C,EACJ,CAEA,AAAQS,sBAAuB,CAC7B,OAAO,IAAIP,QAAQ,cAChBE,WAAW,CAAC,2BACZmB,QAAQ,CACP,QACA,qDACAtB,6BAEDa,oBAAoB,CAAC,OACrBC,MAAM,CAAC,AAACS,MACPR,QAAQC,MAAM,CAACC,KAAK,CAACnB,UAAUoB,IAAI,CAACM,UAAU,CAACD,KACjD,EACJ,CAEA,AAAQb,qBAAsB,CAC5B,OAAO,IAAIT,QAAQ,aAChBE,WAAW,CAAC,kBACZmB,QAAQ,CAAC,OAAQ,qCACjBR,MAAM,CAAC,AAACI,OACPH,QAAQC,MAAM,CAACC,KAAK,CAACnB,UAAUoB,IAAI,CAACO,SAAS,CAACP,MAChD,EACJ,CACF"}