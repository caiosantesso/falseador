import{util}from"@falseador/lib";import{Argument,InvalidArgumentError}from"commander";export function validaNúmeroInteiroNãoNegativo(valor){try{const número=parseInt(valor);util.númeroInteiroNãoNegativoOuLançaErro(número);return número}catch(e){throw new InvalidArgumentError(`${valor} n\xe3o \xe9 inteiro positivo.`)}}export function validaNúmeroInteiroPositivo(valor){try{const número=parseInt(valor);util.númeroInteiroPositivoOuLançaErro(número);return número}catch(e){throw new InvalidArgumentError(`${valor} n\xe3o \xe9 inteiro positivo.`)}}export function validaNúmeroMaiorQue1(valor){const número=validaNúmeroInteiroPositivo(valor);if(número===1)throw new InvalidArgumentError("<x> deve ser maior que 1.");return número}export function validaNúmeroInteiro(valor){try{const número=parseInt(valor);util.númeroInteiroOuLançaErro(número);return número}catch(e){throw new InvalidArgumentError(`${valor} n\xe3o \xe9 inteiro.`)}}export function validaOpçãoNúmeroInteiroPositivo(valor,_anterior){try{const número=parseInt(valor);util.númeroInteiroPositivoOuLançaErro(número);return número}catch(_e){throw new InvalidArgumentError(`${valor} n\xe3o \xe9 inteiro positivo.`)}}export const gênero=new Argument("[gênero]","F, M ou nenhum").choices(["F","f","m","M"]);export const carmesim=(estático,dinâmico)=>`\x1b[31m${estático.join("")}${dinâmico??""}\x1b[0m`;
//# sourceMappingURL=Utilitários.js.map