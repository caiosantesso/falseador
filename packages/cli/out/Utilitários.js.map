{"version":3,"sources":["../src/Utilitários.ts"],"sourcesContent":["import { util } from 'falseador-lib';\nimport { Argument, InvalidArgumentError } from 'commander';\n\nexport function validaNúmeroInteiroNãoNegativo(valor: never): number {\n  try {\n    const número = parseInt(valor);\n    util.númeroInteiroNãoNegativoOuLançaErro(número);\n    return número;\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  } catch (e) {\n    throw new InvalidArgumentError(`${valor} não é inteiro positivo.`);\n  }\n}\n\nexport function validaNúmeroInteiroPositivo(valor: string): number {\n  try {\n    const número = parseInt(valor);\n    util.númeroInteiroPositivoOuLançaErro(número);\n    return número;\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  } catch (e) {\n    throw new InvalidArgumentError(`${valor} não é inteiro positivo.`);\n  }\n}\n\nexport function validaNúmeroMaiorQue1(valor: string): number {\n  const número = validaNúmeroInteiroPositivo(valor);\n  if (número === 1) throw new InvalidArgumentError('<x> deve ser maior que 1.');\n  return número;\n}\n\nexport function validaNúmeroInteiro(valor: never): number {\n  try {\n    const número = parseInt(valor);\n    util.númeroInteiroOuLançaErro(número);\n    return número;\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  } catch (e) {\n    throw new InvalidArgumentError(`${valor} não é inteiro.`);\n  }\n}\n\nexport function validaOpçãoNúmeroInteiroPositivo(\n  valor: string,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  _anterior: number,\n): number {\n  try {\n    const número = parseInt(valor);\n    util.númeroInteiroPositivoOuLançaErro(número);\n    return número;\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  } catch (_e) {\n    throw new InvalidArgumentError(`${valor} não é inteiro positivo.`);\n  }\n}\n\nexport const gênero = new Argument('[gênero]', 'F, M ou nenhum').choices([\n  'F',\n  'f',\n  'm',\n  'M',\n]);\n\nexport const carmesim = (estático: TemplateStringsArray, dinâmico?: string) =>\n  `\\x1b[31m${estático.join('')}${dinâmico ?? ''}\\x1b[0m`;\n"],"names":["util","Argument","InvalidArgumentError","validaNúmeroInteiroNãoNegativo","valor","número","parseInt","númeroInteiroNãoNegativoOuLançaErro","e","validaNúmeroInteiroPositivo","númeroInteiroPositivoOuLançaErro","validaNúmeroMaiorQue1","validaNúmeroInteiro","númeroInteiroOuLançaErro","validaOpçãoNúmeroInteiroPositivo","_anterior","_e","gênero","choices","carmesim","estático","dinâmico","join"],"mappings":"AAAA,OAASA,IAAI,KAAQ,eAAgB,AACrC,QAASC,QAAQ,CAAEC,oBAAoB,KAAQ,WAAY,AAE3D,QAAO,SAASC,+BAA+BC,KAAY,EACzD,GAAI,CACF,MAAMC,OAASC,SAASF,OACxBJ,KAAKO,mCAAmC,CAACF,QACzC,OAAOA,MAET,CAAE,MAAOG,EAAG,CACV,MAAM,IAAIN,qBAAqB,CAAC,EAAEE,MAAM,8BAAwB,CAAC,CACnE,CACF,CAEA,OAAO,SAASK,4BAA4BL,KAAa,EACvD,GAAI,CACF,MAAMC,OAASC,SAASF,OACxBJ,KAAKU,gCAAgC,CAACL,QACtC,OAAOA,MAET,CAAE,MAAOG,EAAG,CACV,MAAM,IAAIN,qBAAqB,CAAC,EAAEE,MAAM,8BAAwB,CAAC,CACnE,CACF,CAEA,OAAO,SAASO,sBAAsBP,KAAa,EACjD,MAAMC,OAASI,4BAA4BL,OAC3C,GAAIC,SAAW,EAAG,MAAM,IAAIH,qBAAqB,6BACjD,OAAOG,MACT,CAEA,OAAO,SAASO,oBAAoBR,KAAY,EAC9C,GAAI,CACF,MAAMC,OAASC,SAASF,OACxBJ,KAAKa,wBAAwB,CAACR,QAC9B,OAAOA,MAET,CAAE,MAAOG,EAAG,CACV,MAAM,IAAIN,qBAAqB,CAAC,EAAEE,MAAM,qBAAe,CAAC,CAC1D,CACF,CAEA,OAAO,SAASU,iCACdV,KAAa,CAEbW,SAAiB,EAEjB,GAAI,CACF,MAAMV,OAASC,SAASF,OACxBJ,KAAKU,gCAAgC,CAACL,QACtC,OAAOA,MAET,CAAE,MAAOW,GAAI,CACX,MAAM,IAAId,qBAAqB,CAAC,EAAEE,MAAM,8BAAwB,CAAC,CACnE,CACF,CAEA,OAAO,MAAMa,OAAS,IAAIhB,SAAS,WAAY,kBAAkBiB,OAAO,CAAC,CACvE,IACA,IACA,IACA,IACD,CAAE,AAEH,QAAO,MAAMC,SAAW,CAACC,SAAgCC,WACvD,CAAC,QAAQ,EAAED,SAASE,IAAI,CAAC,IAAI,EAAED,UAAY,GAAG,OAAO,CAAC,AAAC"}