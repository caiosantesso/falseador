import{falseador}from"falseador-lib";import{gênero,validaNúmeroInteiroPositivo}from"./Utilitários.js";import{Comando}from"./Comando.js";export class ComandoNome extends Comando{constructor(){super("nome");super.description("Gera/transforma nomes.").alias("n").addCommand(this.subcomandoCompleto(),{isDefault:true}).addCommand(this.subcomandoSobrenomes()).addCommand(this.subcomandoComposto()).addCommand(this.subcomandoAbreviado()).addCommand(this.subcomandoPrimeiro())}subcomandoCompleto(){return new Comando("completo").description("Nome completo.").addArgument(gênero).allowExcessArguments(false).action(gênero=>{process.stdout.write(falseador.nome.completo(gênero))})}subcomandoPrimeiro(){return new Comando("primeiro").description("Primeiro nome.").addArgument(gênero).allowExcessArguments(false).action(gênero=>{process.stdout.write(falseador.nome.primeiro(gênero))})}subcomandoComposto(){return new Comando("composto").description("Nome composto.").addArgument(gênero).allowExcessArguments(false).action(gênero=>{process.stdout.write(falseador.nome.composto(gênero))})}subcomandoSobrenomes(){return new Comando("sobrenomes").description("Conjunto de sobrenomes.").argument("[num]","Número de sobrenomes, entre 1 e 3 caso indefinido.",validaNúmeroInteiroPositivo).allowExcessArguments(false).action(num=>{process.stdout.write(falseador.nome.sobrenomes(num))})}subcomandoAbreviado(){return new Comando("abreviado").description("Abrevia nomes.").argument("nome","Nome a ser abreviado entre aspas.").action(nome=>{process.stdout.write(falseador.nome.abreviado(nome))})}}
//# sourceMappingURL=ComandoNome.js.map