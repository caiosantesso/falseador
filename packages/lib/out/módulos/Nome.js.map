{"version":3,"sources":["../../src/módulos/Nome.ts"],"sourcesContent":["import { Número } from './Número';\nimport { Tipo } from './Tipo';\nimport { ListaDeNomes } from '../coleções/ListaDeNomes';\nimport { Exceção } from '../integridade/Exceção';\n\nexport type Gênero = 'F' | 'M';\n\nexport class Nome {\n  readonly #número = new Número();\n  readonly #tipo = new Tipo();\n  readonly #agnomes = new Set([\n    'Júnior',\n    'Junior',\n    'Filho',\n    'Segundo',\n    'Neto',\n    'Terceiro',\n    'Irmão',\n    'Sobrinho',\n    'Filha',\n    'Segunda',\n    'Neta',\n    'Terceira',\n    'Irmã',\n    'Sobrinha',\n  ]);\n  readonly #preposições = new Set([\n    'dos',\n    'das',\n    'do',\n    'da',\n    'de',\n    'del',\n    'di',\n  ]);\n\n  #primeiroComGênero(gênero: Gênero): string {\n    const nomes = ListaDeNomes[gênero];\n    const índice = this.#número.exclusivoEntreZeroE(nomes.length);\n    return nomes[índice];\n  }\n\n  #gêneroVálido(gênero?: Gênero): Gênero {\n    gênero = gênero?.toUpperCase() as Gênero;\n\n    return gênero === 'F' || gênero === 'M'\n      ? gênero\n      : this.#tipo.entre<Gênero>(['F', 'M']);\n  }\n\n  public primeiro(gênero?: Gênero): string {\n    gênero = this.#gêneroVálido(gênero);\n\n    return this.#primeiroComGênero(gênero);\n  }\n\n  public composto(gênero?: Gênero): string {\n    gênero = this.#gêneroVálido(gênero);\n\n    return (\n      this.#primeiroComGênero(gênero) + ' ' + this.#primeiroComGênero(gênero)\n    );\n  }\n\n  public sobrenome(): string {\n    const { sobrenomes } = ListaDeNomes;\n    const índice = this.#número.exclusivoEntreZeroE(sobrenomes.length);\n    return sobrenomes[índice];\n  }\n\n  public sobrenomes(quantidade?: number): string {\n    const número =\n      quantidade && quantidade >= 1 ? quantidade : this.#número.entreUmE(3);\n\n    const sobrenomes = [];\n    for (let i = 0; i < número; i++) {\n      sobrenomes.push(this.sobrenome());\n    }\n    return sobrenomes.join(' ');\n  }\n\n  public completo(gênero?: Gênero): string {\n    gênero = this.#gêneroVálido(gênero);\n\n    const nome = this.#tipo.booleano()\n      ? this.#primeiroComGênero(gênero)\n      : this.composto(gênero);\n\n    return `${nome} ${this.sobrenomes()}`;\n  }\n\n  public abreviado(nomeCompleto: string): string {\n    if (typeof nomeCompleto !== 'string')\n      throw new Exceção('nome deve ser string.');\n\n    const nomes = nomeCompleto\n      .trim()\n      .split(' ')\n      .filter((pedaço) => !this.#preposições.has(pedaço));\n\n    if (nomes.length <= 2) return nomeCompleto;\n\n    const temAgnome = this.#agnomes.has(nomes[nomes.length - 1]);\n    if (temAgnome && nomes.length === 3) {\n      return nomeCompleto;\n    }\n\n    const primeiro = nomes.shift();\n    const agnome = temAgnome ? this.agnome(nomes) : '';\n    const último = nomes.pop() + agnome;\n    const abreviaturas = nomes.map((nome) => nome[0] + '.').join(' ');\n\n    return `${primeiro} ${abreviaturas} ${último}`;\n  }\n\n  private agnome(nomes: string[]): string {\n    let agnome = nomes.pop();\n    agnome = agnome === 'Júnior' || agnome === 'Junior' ? 'Jr.' : agnome;\n    return ` ${agnome}`;\n  }\n\n  public éNomeCompletoVálido(nomeCompleto: string): boolean {\n    if (typeof nomeCompleto !== 'string') return false;\n\n    const nomes = nomeCompleto.split(' ');\n    if (!this.éNomeVálido(nomes[0]) || nomes.length <= 1) return false;\n\n    let últimaFoiPreposição = false;\n    for (let i = 1; i < nomes.length; i++) {\n      const nome = nomes[i];\n\n      if (this.éPreposição(nome)) {\n        if (últimaFoiPreposição) return false;\n        últimaFoiPreposição = true;\n      } else {\n        if (!this.éNomeVálido(nome)) return false;\n        últimaFoiPreposição = false;\n      }\n    }\n\n    return !últimaFoiPreposição;\n  }\n\n  private éNomeVálido(nome: string): boolean {\n    return /^[a-zàáâãçéêíóôõú']{3,}$/i.test(nome);\n  }\n\n  private éPreposição(nome: string): boolean {\n    return this.#preposições.has(nome.toLowerCase());\n  }\n}\n"],"names":["Número","Tipo","ListaDeNomes","Exceção","Nome","Set","gênero","nomes","índice","exclusivoEntreZeroE","length","toUpperCase","entre","primeiro","composto","sobrenome","sobrenomes","quantidade","número","entreUmE","i","push","join","completo","nome","booleano","abreviado","nomeCompleto","trim","split","filter","pedaço","has","temAgnome","shift","agnome","último","pop","abreviaturas","map","éNomeCompletoVálido","éNomeVálido","últimaFoiPreposição","éPreposição","test","toLowerCase"],"mappings":"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"}