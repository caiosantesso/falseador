{"version":3,"sources":["../../src/módulos/Número.ts"],"sourcesContent":["import { Validações } from '../integridade/Validações';\nimport { Exceção } from '../integridade/Exceção';\n\nexport class Número {\n  public entreZeroE(limite: number, inclusivo = true): number {\n    Validações.númeroInteiroPositivo(limite);\n\n    if ((inclusivo && limite <= 0) || (!inclusivo && limite <= 1))\n      throw new Exceção(\n        `Número limite inferior ao mínimo. Recebido ${limite}.`,\n      );\n\n    if (inclusivo) limite++;\n    return Math.floor(limite * Math.random());\n  }\n\n  public exclusivoEntreZeroE(limite: number): number {\n    return this.entreZeroE(limite, false);\n  }\n\n  public entreUmE(limite: number, inclusivo = true): number {\n    return this.entreZeroE(limite - 1, inclusivo) + 1;\n  }\n\n  public exclusivoEntreUmE(limite: number): number {\n    return this.entreUmE(limite, false);\n  }\n\n  public entre(limiteInf: number, limiteSup: number): number {\n    Validações.númeroInteiro(limiteInf);\n    Validações.númeroInteiro(limiteSup);\n    if (limiteInf > limiteSup) [limiteInf, limiteSup] = [limiteSup, limiteInf];\n    const limite = limiteSup - limiteInf;\n    return this.entreZeroE(limite) + limiteInf;\n  }\n\n  #dígitoRomano(dígito: number, base10: number): string {\n    if (dígito >= 1 && dígito <= 3) {\n      return ['I', 'X', 'C', 'M'][base10].repeat(dígito);\n    } else if (dígito === 4) {\n      return this.#dígitoRomano(1, base10) + this.#dígitoRomano(5, base10);\n    } else if (dígito === 5) {\n      return ['V', 'L', 'D'][base10];\n    } else if (dígito >= 6 && dígito <= 8) {\n      return (\n        this.#dígitoRomano(5, base10) + this.#dígitoRomano(dígito - 5, base10)\n      );\n    } else if (dígito === 9) {\n      return this.#dígitoRomano(1, base10) + this.#dígitoRomano(1, base10 + 1);\n    }\n    return '';\n  }\n\n  public romano(número: number): string {\n    Validações.númeroInteiroPositivo(número);\n    if (número <= 0 || número >= 4000)\n      throw new Exceção(\n        `Número deve estar entre 1 e 3.999. Recebido ${número}`,\n      );\n    const milhar = this.#dígitoRomano(Math.trunc(número / 1000), 3);\n    número %= 1000;\n    const centena = this.#dígitoRomano(Math.trunc(número / 100), 2);\n    número %= 100;\n    const dezena = this.#dígitoRomano(Math.trunc(número / 10), 1);\n    número %= 10;\n    const unidade = this.#dígitoRomano(número, 0);\n    return `${milhar}${centena}${dezena}${unidade}`;\n  }\n\n  readonly #unidades = [\n    'zero',\n    'um',\n    'dois',\n    'três',\n    'quatro',\n    'cinco',\n    'seis',\n    'sete',\n    'oito',\n    'nove',\n    'dez',\n    'onze',\n    'doze',\n    'treze',\n    'catorze',\n    'quinze',\n    'dezesseis',\n    'dezesste',\n    'dezoito',\n    'dezenove',\n  ];\n\n  readonly #dezenas = [\n    undefined,\n    undefined,\n    'vinte',\n    'trinta',\n    'quarenta',\n    'cinquenta',\n    'sessenta',\n    'setenta',\n    'oitenta',\n    'noventa',\n  ];\n\n  readonly #centenas = [\n    undefined,\n    'cento',\n    'duzentos',\n    'trezentos',\n    'quatrocentos',\n    'quinhentos',\n    'seiscentos',\n    'setecentos',\n    'oitocentos',\n    'novecentos',\n  ];\n\n  #dezenaPorExtenso(número: number): string {\n    if (número <= 19) return this.#unidades[número];\n    const dezena = this.#dezenas[Math.trunc(número / 10)];\n    const unidade = this.#unidades[número % 10];\n    return unidade === 'zero' ? `${dezena}` : `${dezena} e ${unidade}`;\n  }\n\n  #centenaPorExtenso(número: number): string {\n    const centena = this.#centenas[Math.trunc(número / 100)];\n    const dezena = this.#dezenaPorExtenso((número %= 100));\n\n    if (centena === undefined) return dezena;\n    else if (dezena === 'zero') return centena === 'cento' ? 'cem' : centena;\n    else return `${centena} e ${dezena}`;\n  }\n\n  #milharesPorExtenso(número: number): string {\n    let milhares = this.#centenaPorExtenso(Math.trunc(número / 1_000));\n    const unidades = this.#centenaPorExtenso(número % 1_000);\n\n    if (milhares === 'zero') return unidades;\n    else {\n      milhares = milhares === 'um' ? 'mil' : `${milhares} mil`;\n\n      if (unidades === 'zero') return milhares;\n      else {\n        const separador = número % 100 === 0 || número % 1_000 < 100;\n        return `${milhares}${separador ? ' e' : ''} ${unidades}`;\n      }\n    }\n  }\n\n  public porExtenso(número: number): string {\n    Validações.númeroInteiroNãoNegativo(número);\n    if (número < 0 || número > 999_999_999_999)\n      throw new Exceção(`${número} deve estar entre 0 e 999.999.999.999.`);\n\n    let resultado = '';\n    const bilhões = this.#centenaPorExtenso(Math.trunc(número / 1_000_000_000));\n    if (bilhões !== 'zero')\n      resultado = bilhões === 'um' ? 'um bilhão' : `${bilhões} bilhões`;\n\n    número %= 1_000_000_000;\n    const milhões = this.#centenaPorExtenso(Math.trunc(número / 1_000_000));\n    if (milhões !== 'zero') {\n      if (resultado !== '') resultado += ' ';\n      resultado += milhões === 'um' ? 'um milhão' : `${milhões} milhões`;\n    }\n\n    const milhares = this.#milharesPorExtenso((número %= 1_000_000));\n    if (milhares !== 'zero' || (milhares === 'zero' && resultado === '')) {\n      if (resultado !== '') resultado += ' ';\n      resultado += milhares;\n    }\n\n    return resultado;\n  }\n}\n"],"names":["Validações","Exceção","Número","entreZeroE","limite","inclusivo","númeroInteiroPositivo","Math","floor","random","exclusivoEntreZeroE","entreUmE","exclusivoEntreUmE","entre","limiteInf","limiteSup","númeroInteiro","dígito","base10","repeat","romano","número","milhar","trunc","centena","dezena","unidade","undefined","milhares","unidades","separador","porExtenso","númeroInteiroNãoNegativo","resultado","bilhões","milhões"],"mappings":"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"}