import{Exceção}from"./Exceção.js";export class Validações{static inteiroOuLançaErro(número){if(!Number.isInteger(número))throw new Exceção(`N\xfamero deve ser inteiro. Recebido ${número}.`)}static menorQueInteiroLimiteOuLançaErro(número){if(número>Number.MAX_SAFE_INTEGER)throw new Exceção(`N\xfamero deve estar dentro do limite de inteiros. Recebido ${número}.`)}static númeroInteiroNãoNegativo(número){Validações.inteiroOuLançaErro(número);Validações.menorQueInteiroLimiteOuLançaErro(número);if(número<0)throw new Exceção(`N\xfamero deve ser n\xe3o-negativo. Recebido ${número}.`)}static númeroInteiroPositivo(número){Validações.inteiroOuLançaErro(número);Validações.menorQueInteiroLimiteOuLançaErro(número);if(número<1)throw new Exceção(`N\xfamero deve ser positivo. Recebido ${número}.`)}static númeroInteiro(número){Validações.inteiroOuLançaErro(número);if(número>Number.MAX_SAFE_INTEGER||número<Number.MIN_SAFE_INTEGER)throw new Exceção(`N\xfamero deve estar dentro do limite de inteiros. Recebido ${número}.`)}static data(data){if(!(data instanceof Date)||data.toString()==="Invalid Date")throw new Exceção(`Data inv\xe1lida. Recebido ${data}`)}}
//# sourceMappingURL=Validações.js.map